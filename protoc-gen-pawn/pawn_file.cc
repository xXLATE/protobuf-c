// Protocol Buffers - Google's data interchange format
// Copyright 2008 Google Inc.  All rights reserved.
// https://developers.google.com/protocol-buffers/
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Author: kenton@google.com (Kenton Varda)
//  Based on original Protocol Buffers design by
//  Sanjay Ghemawat, Jeff Dean, and others.
//
// Copyright (c) 2008-2013, Dave Benson.  All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//     * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//
//     * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//
//     * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Modified for Pawn by the protobuf-pawn project

#include "pawn_file.h"
#include "pawn_enum.h"
#include "pawn_message.h"
#include "pawn_service.h"
#include "pawn_helpers.h"

#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/printer.h>

namespace google {
namespace protobuf {
namespace compiler {
namespace pawn {

FileGenerator::FileGenerator(const FileDescriptor* file)
  : file_(file) {
  
  // Generate nested message generators
  message_generators_.reserve(file_->message_type_count());
  for (int i = 0; i < file_->message_type_count(); i++) {
    message_generators_.emplace_back(new MessageGenerator(file_->message_type(i)));
  }

  // Generate enum generators
  enum_generators_.reserve(file_->enum_type_count());
  for (int i = 0; i < file_->enum_type_count(); i++) {
    enum_generators_.emplace_back(new EnumGenerator(file_->enum_type(i)));
  }

  // Generate service generators
  service_generators_.reserve(file_->service_count());
  for (int i = 0; i < file_->service_count(); i++) {
    service_generators_.emplace_back(new ServiceGenerator(file_->service(i)));
  }
}

FileGenerator::~FileGenerator() {
}

void FileGenerator::GenerateHeader(io::Printer* printer) {
  std::string filename_identifier = FilenameToPawnGuard(file_->name());
  
  // Generate standard header and include guard
  printer->Print(
    "/* Generated by the protocol buffer compiler for Pawn.  DO NOT EDIT! */\n"
    "/* source: $filename$ */\n\n",
    "filename", file_->name());

  printer->Print(
    "#if defined $guard$\n"
    "  #endinput\n"
    "#endif\n"
    "#define $guard$\n\n",
    "guard", filename_identifier);

  // Generate dependencies
  for (int i = 0; i < file_->dependency_count(); i++) {
    const FileDescriptor* dependency = file_->dependency(i);
    std::string include_name = FilenameToPawnInclude(dependency->name());
    printer->Print("#include \"$include$\"\n", "include", include_name);
  }
  
  if (file_->dependency_count() > 0) {
    printer->Print("\n");
  }
}

void FileGenerator::GenerateSource(io::Printer* printer) {
  GenerateHeader(printer);

  // Generate top-level enums
  for (int i = 0; i < enum_generators_.size(); i++) {
    enum_generators_[i]->GenerateDefinition(printer);
  }

  // Generate messages with their nested types
  for (int i = 0; i < message_generators_.size(); i++) {
    // Generate nested enums first
    message_generators_[i]->GenerateEnumDefinitions(printer);
    // Generate nested messages
    message_generators_[i]->GenerateNestedMessageDefinitions(printer);
    // Generate the main message struct
    message_generators_[i]->GenerateStructDefinition(printer);
  }

  // Generate services
  for (int i = 0; i < service_generators_.size(); i++) {
    service_generators_[i]->GenerateDefinition(printer);
  }
}

}  // namespace pawn
}  // namespace compiler
}  // namespace protobuf
}  // namespace google
